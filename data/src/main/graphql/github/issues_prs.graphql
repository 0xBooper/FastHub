query getIssuesWithoutState($login: String!, $count: Int!) {
    user(login: $login) {
        issues(first: $count, orderBy: {field: CREATED_AT, direction: DESC}) {
            nodes {
                ...ShortIssueRowItem
            }
        }
    }
}

query getIssues($login: String!, $state: [IssueState!], $count: Int!) {
    user(login: $login) {
        issues(first: $count, orderBy: {field: CREATED_AT, direction: DESC}, states: $state) {
            nodes {
                ...ShortIssueRowItem
            }
        }
    }
}

query getPullRequests($login: String!, $count: Int!)  {
    user(login: $login) {
        pullRequests(first: $count, orderBy: {field: CREATED_AT, direction: DESC}) {
            nodes {
                ...ShortPullRequestRowItem
            }
        }
    }
}

query getIssue($login: String!, $repo: String!, $number: Int!) {
    repositoryOwner(login: $login) {
        repository(name: $repo) {
            issue(number: $number) {
                ... FullIssue
            }
        }
    }
}

query getLastIssueComment($login: String!, $repo: String!, $number: Int!) {
    repositoryOwner(login: $login) {
        repository(name: $repo) {
          issue(number: $number) {
            timelineItems(last: 1, itemTypes: [ISSUE_COMMENT]) {
              nodes {
                ... on IssueComment {
                    author {
                        login
                        avatarUrl
                    }
                    createdAt
                    authorAssociation
                    bodyHTML
                    body
                    id
                    updatedAt
                    viewerCanReact
                    viewerCanDelete
                    viewerCanUpdate
                    viewerDidAuthor
                    viewerCanMinimize
                    viewerCannotUpdateReasons
                    reactionGroups {
                        ... Reactions
                    }
                }
              }
            }
          }
        }
    }
}

query getLastPrComment($login: String!, $repo: String!, $number: Int!) {
    repositoryOwner(login: $login) {
        repository(name: $repo) {
          pullRequest(number: $number) {
            timelineItems(last: 1, itemTypes: [ISSUE_COMMENT]) {
              nodes {
                ... on IssueComment {
                    author {
                        login
                        avatarUrl
                    }
                    createdAt
                    authorAssociation
                    bodyHTML
                    body
                    id
                    updatedAt
                    viewerCanReact
                    viewerCanDelete
                    viewerCanUpdate
                    viewerDidAuthor
                    viewerCanMinimize
                    viewerCannotUpdateReasons
                    reactionGroups {
                        ... Reactions
                    }
                }
              }
            }
          }
        }
    }
}

query getIssueTimeline($login: String!, $repo: String!, $number: Int!, $page: String) {
    repositoryOwner(login: $login) {
        repository(name: $repo) {
            issue(number: $number) {
                timelineItems(first: 30, after: $page, itemTypes: [ISSUE_COMMENT, CLOSED_EVENT, REOPENED_EVENT, REFERENCED_EVENT, ASSIGNED_EVENT, UNASSIGNED_EVENT, LABELED_EVENT, UNLABELED_EVENT, MILESTONED_EVENT, DEMILESTONED_EVENT, RENAMED_TITLE_EVENT, LOCKED_EVENT, UNLOCKED_EVENT, TRANSFERRED_EVENT]) {
                    totalCount
                    pageInfo {
                        endCursor
                        hasNextPage
                        hasPreviousPage
                        startCursor
                    }
                    nodes {
                        __typename
                        ... on IssueComment {
                            author {
                                login
                                avatarUrl
                                url
                            }
                            createdAt
                            authorAssociation
                            bodyHTML
                            body
                            id
                            updatedAt
                            viewerCanReact
                            viewerCanDelete
                            viewerCanUpdate
                            viewerDidAuthor
                            viewerCanMinimize
                            viewerCannotUpdateReasons
                            reactionGroups {
                                ... Reactions
                            }
                        }
                        ... on CrossReferencedEvent {
                            createdAt
                            isCrossRepository
                            referencedAt
                            source {
                                ... ShortPullRequestRowItem
                                ... ShortIssueRowItem
                            }
                            willCloseTarget
                            actor { ... ShortActor }
                        }
                        ... on ClosedEvent {
                            actor { ... ShortActor }
                            createdAt
                            closer {
                                ... CommitFragment
                                ... ShortPullRequestRowItem
                            }
                        }
                        ... on ReopenedEvent {
                            actor { ... ShortActor }
                            createdAt
                        }
                        ... on SubscribedEvent {
                            actor { ... ShortActor }
                            createdAt
                        }
                        ... on UnsubscribedEvent {
                            actor { ... ShortActor }
                            createdAt
                        }
                        ... on ReferencedEvent {
                            actor { ... ShortActor }
                            createdAt
                            commitRepository {
                                nameWithOwner
                            }
                            isCrossRepository
                            isDirectReference
                            commit {
                                ... CommitFragment
                            }
                            subject {
                                ... ShortPullRequestRowItem
                                ... ShortIssueRowItem
                            }
                        }
                        ... on AssignedEvent {
                            actor { ... ShortActor }
                            createdAt
                            user {
                                login
                                avatarUrl
                            }
                        }
                        ... on UnassignedEvent {
                            actor { ... ShortActor }
                            createdAt
                            user {
                                login
                                avatarUrl
                            }
                        }
                        ... on LabeledEvent {
                            actor { ... ShortActor }
                            createdAt
                            label {
                                color
                                name
                                isDefault
                            }
                        }
                        ... on UnlabeledEvent {
                            actor { ... ShortActor }
                            createdAt
                            label {
                                color
                                name
                                isDefault
                            }
                        }
                        ... on MilestonedEvent {
                            actor { ... ShortActor }
                            createdAt
                            milestoneTitle
                        }
                        ... on DemilestonedEvent {
                            actor { ... ShortActor }
                            createdAt
                            milestoneTitle
                        }
                        ... on RenamedTitleEvent {
                            actor { ... ShortActor }
                            createdAt
                            currentTitle
                            previousTitle
                        }
                        ... on LockedEvent {
                            actor { ... ShortActor }
                            createdAt
                            lockReason
                            lockable {
                                activeLockReason
                            }
                        }
                        ... on UnlockedEvent {
                            actor { ... ShortActor }
                            createdAt
                            lockable {
                                activeLockReason
                            }
                        }
                        ... on TransferredEvent {
                            actor { ... ShortActor }
                            createdAt
                            fromRepository {
                                id
                                nameWithOwner
                                url
                            }
                            issue {
                                number
                                url
                            }
                        }
                    }
                }
            }
        }
    }
}

query getLabels($login: String!, $repo: String!, $page: String){
    repositoryOwner(login: $login) {
        repository(name: $repo) {
            labels(first: 30, after: $page){
                totalCount
                pageInfo {
                    endCursor
                    hasNextPage
                    hasPreviousPage
                    startCursor
                }
                nodes {
                    ... Labels
                }
            }
        }
    }
}

query getAssignees($login: String!, $repo: String!, $page: String) {
  repositoryOwner(login: $login) {
    repository(name: $repo) {
        assignableUsers(first: 30, after: $page) {
          totalCount
          pageInfo {
            endCursor
            hasNextPage
            hasPreviousPage
            startCursor
          }
          nodes {
            ...ShortUserRowItem
          }
        }
    }
  }
}

query getMilestones($login: String!, $repo: String!, $page: String) {
  repositoryOwner(login: $login) {
    repository(name: $repo) {
        milestones(first: 30, after: $page) {
          totalCount
          pageInfo {
            endCursor
            hasNextPage
            hasPreviousPage
            startCursor
          }
          nodes {
            ... MilestoneFragment
          }
        }
    }
  }
}